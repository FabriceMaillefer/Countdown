@page "/"
@implements IDisposable
@inject IJSRuntime JS
@inject Countdown.Model.DownTimer DownTimer;
@inject Countdown.Model.Information Information;

<div class="main-container @(Information.ShowMessage ? "main-container-trigger":"")" @onclick="@(() => {ShowLinks = !ShowLinks;})">
    @if (ShowLinks)
    {
        <div class="remote-link">
            <a href="/remote">Accès à distance</a>
            &nbsp;
            <a href="/control">Contrôle</a>
            &nbsp;
            @if(IsFullScreen)
            {
                <a href="#" class="visible-in-fullscreen" @onclick="CloseFullscreen">Quitter le plein écran</a>
            }
            else
            {
                <a href="#" @onclick="OpenFullScreen">Plein écran</a>
            }
        </div>
    }


    <div class="container">

    @if (Information.ShowCountdown)
    {
      <h1 class="headline">Temps restant</h1>
      <div class="countdown">
        <ul>
            @if(@DownTimer.RemainingTime.Hours > 0)
            {
                <li><span class="hours fancy-font">@(DownTimer.RemainingTime.Hours)</span>@(DownTimer.RemainingTime.Hours > 1 ? "Heures" : "Heure")</li>
            }

            <li><span class="minutes fancy-font">@($"{DownTimer.RemainingTime.Minutes:00}")</span>@(DownTimer.RemainingTime.Minutes > 1 ? "Minutes" : "Minute")</li>
            <li><span class="seconds fancy-font">@($"{DownTimer.RemainingTime.Seconds:00}")</span>@(DownTimer.RemainingTime.Seconds > 1 ? "Secondes" : "Seconde")</li>
        </ul>
      </div>
      <progress
          value="@(Math.Min(Math.Round(DownTimer.ElapsedTime.TotalSeconds / DownTimer.Duration.TotalSeconds * 100), 100))"
          max="100" />
        <div>
                <h1 class="headline fancy-font" style="display:flex; justify-content:space-between; width:100%">
                <small>@(DownTimer.Elapsed ? "" : $"{DateTime.Now.Add(-1*DownTimer.ElapsedTime).ToShortTimeString()}")</small>
                    <span>
                        @if (!Information.ShowClock)
                        {
                            @(DateTime.Now.Hour)
                            <span class="hours-dot">:</span>
                            @(DateTime.Now.Minute.ToString("D2"))
                        }
                    </span>
                <small>@(DownTimer.Elapsed ? "" : $"{DateTime.Now.Add(DownTimer.RemainingTime).ToShortTimeString()}")</small>
            </h1>
        </div>  
    }

    @if (Information.ShowClock)
    {
        <div>
                <h1 class="headline fancy-font" style="font-size:25vw;">
                    <span>@(DateTime.Now.Hour)
                        <span class="hours-dot" style="margin: 0 -4vw;">:</span>
                        @(DateTime.Now.Minute.ToString("D2"))
                    </span>
            </h1>
        </div>  
     }

    @if (!string.IsNullOrEmpty(Information.Message) && Information.ShowMessage)
    {
        <div class="message">
            @Information.Message
        </div>
    }
    </div>
</div>




@code{
    private bool ShowLinks = false;
    private bool IsFullScreen = false;
    private System.Threading.Timer? _timer;

    private bool _showDot = false;

    protected override void OnInitialized()
    {
        _timer = new System.Threading.Timer(async _ =>  // async void
        {
            _showDot = !_showDot;
            await InvokeAsync(StateHasChanged);
        }, null, 0, 500);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsFullScreen = await JS.InvokeAsync<bool>("isFullscreen");
        }
        await  base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    private async Task OpenFullScreen()
    {
        IsFullScreen = await JS.InvokeAsync<bool>("openFullscreen");
    }

    private async Task CloseFullscreen()
    {
        IsFullScreen = ! (await JS.InvokeAsync<bool>("closeFullscreen"));
    }

    private async Task<bool> IsFullScreenAsync(){
        return await JS.InvokeAsync<bool>("isFullscreen");
    }
}